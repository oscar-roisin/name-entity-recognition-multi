#!/usr/bin/env python

"""
Usage: sgml_extract sgml-file sgml-element [marker]

Extracts all content of a given XML element from an XML file - one on each line.
The optional marker is printed before and after each content line.
"""

from sparv.xmlanalyzer import html_entities, problematic_entity
from html.parser import HTMLParser
import sys

def out(string):
    sys.stdout.write(string)

class Extractor(HTMLParser):
    def __init__(self, element, marker=""):
        self.element = element.lower()
        self.marker = marker
        self.stack = 0
        HTMLParser.__init__(self)

    def handle_starttag(self, tag, attrs):
        if tag != self.element: return
        out(self.marker)
        self.stack += 1

    def handle_endtag(self, tag):
        if tag != self.element: return
        out(self.marker)
        self.stack -= 1
        if not self.stack:
            print()

    def handle_data(self, content):
        if not self.stack: return
        if "&" in content: raise TypeError("XML special character: &")
        if "<" in content: raise TypeError("XML special character: <")
        if ">" in content: raise TypeError("XML special character: >")
        out(content)

    def handle_charref(self, name):
        if not self.stack: return
        if problematic_entity('#' + name):
            raise TypeError("Control character reference: &#%s;" % name)
        if name.startswith('x'):
            code = int(name[1:], 16)
        else:
            code = int(name)
        out(unichr(code))

    def handle_entityref(self, name):
        if not self.stack: return
        if problematic_entity(name):
            raise TypeError("Uknown HTML entity: &%s;" % name)
        code = html_entities[name]
        out(unichr(code))


def sgml_extract(sgmlfile, *args):
    extract = Extractor(*args)
    with open(sgmlfile) as stream:
        for line in stream:
            extract.feed(line)
    extract.close()


######################################################################
# Running from the command line

if __name__ == '__main__':
    import sys
    if len(sys.argv) >= 3:
        sgml_extract(*sys.argv[1:])
    else:
        exit(__doc__)
